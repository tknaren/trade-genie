//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TGEntities : DbContext
    {
        public TGEntities()
            : base("name=TGEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MasterStockList> MasterStockLists { get; set; }
        public virtual DbSet<TickerMin> TickerMins { get; set; }
        public virtual DbSet<TickerMinElderIndicator> TickerMinElderIndicators { get; set; }
        public virtual DbSet<TickerMinEMAHA> TickerMinEMAHAs { get; set; }
        public virtual DbSet<TickerMinSuperTrend> TickerMinSuperTrends { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
    
        public virtual ObjectResult<spGetStocksWithGapOpening_Result> spGetStocksWithGapOpening(Nullable<System.DateTime> yesterday, Nullable<System.DateTime> today, Nullable<int> percentage, Nullable<int> stockPrice)
        {
            var yesterdayParameter = yesterday.HasValue ?
                new ObjectParameter("yesterday", yesterday) :
                new ObjectParameter("yesterday", typeof(System.DateTime));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(int));
    
            var stockPriceParameter = stockPrice.HasValue ?
                new ObjectParameter("stockPrice", stockPrice) :
                new ObjectParameter("stockPrice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStocksWithGapOpening_Result>("spGetStocksWithGapOpening", yesterdayParameter, todayParameter, percentageParameter, stockPriceParameter);
        }
    
        public virtual ObjectResult<spGetGapOpenedScripts_Result> spGetGapOpenedScripts(Nullable<System.DateTime> yesterday, Nullable<System.DateTime> today, Nullable<int> targetPercentage, Nullable<int> gapPercentage, Nullable<int> priceRangeHigh, Nullable<int> priceRangeLow)
        {
            var yesterdayParameter = yesterday.HasValue ?
                new ObjectParameter("yesterday", yesterday) :
                new ObjectParameter("yesterday", typeof(System.DateTime));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var targetPercentageParameter = targetPercentage.HasValue ?
                new ObjectParameter("targetPercentage", targetPercentage) :
                new ObjectParameter("targetPercentage", typeof(int));
    
            var gapPercentageParameter = gapPercentage.HasValue ?
                new ObjectParameter("gapPercentage", gapPercentage) :
                new ObjectParameter("gapPercentage", typeof(int));
    
            var priceRangeHighParameter = priceRangeHigh.HasValue ?
                new ObjectParameter("priceRangeHigh", priceRangeHigh) :
                new ObjectParameter("priceRangeHigh", typeof(int));
    
            var priceRangeLowParameter = priceRangeLow.HasValue ?
                new ObjectParameter("priceRangeLow", priceRangeLow) :
                new ObjectParameter("priceRangeLow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGapOpenedScripts_Result>("spGetGapOpenedScripts", yesterdayParameter, todayParameter, targetPercentageParameter, gapPercentageParameter, priceRangeHighParameter, priceRangeLowParameter);
        }
    }
}
