//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TradeGenie.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TickerEntities : DbContext
    {
        public TickerEntities()
            : base("name=TickerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MasterStockList> MasterStockLists { get; set; }
        public virtual DbSet<TickerMin> TickerMins { get; set; }
        public virtual DbSet<TickerRealTime> TickerRealTimes { get; set; }
        public virtual DbSet<TickerMinElderIndicator> TickerMinElderIndicators { get; set; }
        public virtual DbSet<ElderBackTesting> ElderBackTestings { get; set; }
        public virtual DbSet<TickerMinEMAHA> TickerMinEMAHAs { get; set; }
    
        public virtual ObjectResult<spGetTickerElderForTimePeriod_Result> spGetTickerElderForTimePeriod(string instrumentList, string timePeriods, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var instrumentListParameter = instrumentList != null ?
                new ObjectParameter("InstrumentList", instrumentList) :
                new ObjectParameter("InstrumentList", typeof(string));
    
            var timePeriodsParameter = timePeriods != null ?
                new ObjectParameter("TimePeriods", timePeriods) :
                new ObjectParameter("TimePeriods", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTickerElderForTimePeriod_Result>("spGetTickerElderForTimePeriod", instrumentListParameter, timePeriodsParameter, startTimeParameter, endTimeParameter);
        }
    }
}
